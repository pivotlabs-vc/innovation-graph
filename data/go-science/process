#!/usr/bin/env python3

import json

class Edge:
    pass

class Element:
    pass

try:

    dump = json.load(open("kumu-cybermaggedon-science-networks.json"))

    elts = {}
    edges = {}

    for i in dump["elements"]:

        id = i["_id"]

        elt = Element()
        elt.id = id

        if "element type" in i["attributes"]:
            elt.type = i["attributes"]["element type"]
        else:
            elt.type = None

        if "label" in i["attributes"]:
            elt.label = i["attributes"]["label"]

        if "description" in i["attributes"]:
            elt.description = i["attributes"]["description"]
        else:
            elt.description = None

        if "tags" in i["attributes"]:
            elt.tags = i["attributes"]["tags"]
            
        elts[id] = elt

    for it in dump["connections"]:

        src = elts[it["from"]]
        dest = elts[it["to"]]

        edge = Edge()
        edge.src = src
        edge.dest = dest

        id = (src.id, dest.id)
        
        edges[id] = edge

except Exception as e:
    print(e)

def edge_name(e):

    n = e.label

    if e.type:
        n += " [" + e.type + "]"
    else:
        n += " [-]"

    return n

def reln(src, dest):

    if src.type:
        stype = src.type
    else:
        stype = None

    if dest.type:
        dtype = dest.type
    else:
        dtype = None

    rels = {
        "Arm's Length Body": {
            "Arm's Length Body": "relates-to",
            "Department": "FIXME",
            "Network": "FIXME",
            "Science Advisory Committee": "FIXME",
            "Science Advisory Council": "FIXME",
            "Subcommittee": "FIXME",
            None: "FIXME",
        },
        "Department": {
            "Arm's Length Body": "FIXME",
            "Department": "FIXME",
            "Executive Agency": "FIXME",
            "External Experts": "FIXME",
            "Group of government experts": "FIXME",
            "Industrial Council": "FIXME",
            "Network": "FIXME",
            "Office": "FIXME",
            "Profession": "FIXME",
            "Research Centre": "FIXME",
            "Research Council": "FIXME",
            "Science Advisory Committee": "FIXME",
            "Science Advisory Council": "FIXME",
            "n/a": "FIXME",
            None: "FIXME",
        },
        "Devolved Administration": {
            "Arm's Length Body": "FIXME",
            "Executive Agency": "FIXME",
            "Research Centre": "FIXME",
            "Science Advisory Committee": "FIXME",
            "Science Advisory Council": "FIXME",
        },
        "Executive Agency": {
            "Arm's Length Body": "FIXME",
            "Science Advisory Committee": "FIXME",
        },
        "External Experts": {
            "Industrial Council": "FIXME",
            "National Academy": "FIXME",
            "Network": "FIXME",
            "Office": "FIXME",
            "Research Council": "FIXME",
            "Science Advisory Committee": "FIXME",
            None: "FIXME",
        },
        "Group of government experts": {
            None: "FIXME",
        },
        "Industrial Council": {
            "Science Advisory Committee": "FIXME",
        },
        "National Academy": {
            "National Academy": "FIXME",
        },
        "Network": {
            "Department": "FIXME",
            "Devolved Administration": "FIXME",
            "External Experts": "FIXME",
            "Network": "FIXME",
            "Subcommittee": "FIXME",
            "n/a": "FIXME",
            None: "FIXME",
        },
        "Office": {
            "Arm's Length Body": "FIXME",
            "Department": "FIXME",
            "External Experts": "FIXME",
            "Group of government experts": "FIXME",
            "Network": "FIXME",
            "Office": "FIXME",
            "Profession": "FIXME",
            "Science Advisory Committee": "FIXME",
            "Science Advisory Council": "FIXME",
        },
        "Research Centre": {
            "Arm's Length Body": "FIXME",
            "Research Centre": "FIXME",
            "Research Council": "FIXME",
        },
        "Research Council": {
            "Department": "FIXME",
            "Executive Agency": "FIXME",
            "External Experts": "FIXME",
            "Research Centre": "FIXME",
        },
        "Science Advisory Committee": {
            "Arm's Length Body": "FIXME",
            "Department": "FIXME",
            "Executive Agency": "FIXME",
            "Industrial Council": "FIXME",
            "Subcommittee": "FIXME",
            "n/a": "FIXME",
        },
        "Science Advisory Council": {
            "Department": "FIXME",
            "External Experts": "FIXME",
            "National Academy": "FIXME",
            "Science Advisory Council": "FIXME",
            None: "FIXME",
        },
        "Subcommittee": {
            "Department": "FIXME",
            "Devolved Administration": "FIXME",
        },
        "n/a": {
            "Department": "FIXME",
            "Science Advisory Committee": "FIXME",
        },
        None: {
            "Arm's Length Body": "FIXME",
            "Department": "FIXME",
            "External Experts": "FIXME",
            "n/a": "FIXME",
            None: "FIXME",
        },
    }

    return rels[stype][dtype]

tiers = []

tier = set()

for elt in elts.values():
    elt.edges = []

for edge in edges.values():
    edge.src.edges.append(edge)
    edge.dest.edges.append(edge)

for elt in elts.values():
    elt.edges = list(set(elt.edges))

#for v in tier:
#    print(elts[v].label)

found = set()
tier = 0

for elt in elts.values():
    elt.tier = None

while True:

    found_before = len(found)
    this_tier_found = set()

    for elt in elts.values():

        if elt.id in found: continue

        this_tier = False

        if tier == 0 and elt.type == "Department":
            this_tier = True

        if tier > 0:
            for edge in elt.edges:
                if edge.src.id in found:
                    this_tier = True
                if edge.dest.id in found:
                    this_tier = True

        if this_tier:
            elt.tier = tier

            if elt.label == "MHPRA":
                print(">>>", elt.label, elt.tier)

            if elt.label == "ABRHP":
                print(">>>", elt.label, elt.tier)

            this_tier_found.add(elt.id)

    found = found.union(this_tier_found)

    # Stop when we can't find any more nodes by edges
    if len(found) == found_before:
        break

    tier += 1

assert len(elts) == len(found)

for edge in edges.values():

    print(edge.src.label, edge.dest.label)

#    print(edge.src.tier, edge.dest.tier)

    if edge.src.tier == edge.dest.tier:

        if edge.src.description == "Cluster": continue
        if edge.dest.description == "Cluster": continue
#        print(edge.src.description)
#        print(edge.dest.description)

        print(edge.src.label, edge.dest.label)
        assert 1 == 2, "Wrod"
