#!/usr/bin/env python3

import json
from rdflib import Literal, URIRef, Graph

class Edge:
    def __init__(self, data):

        self.id = data["_id"]

class Element:
    def __init__(self, data):

        self.id = data["_id"]
        attrs = data["attributes"]

        self.label = attrs.get("label")
        self.description = attrs.get("description", None)
        self.tags = attrs.get("tags", [])
        self.type = attrs.get("element type", None)
        self.size = attrs.get("size", 0)
        self.last = attrs.get("metrics::last", 0)

class Map:
    def __init__(self, elements, edges):
        self.edges = edges
        self.elements = elements

    def get_type(self, type):
        return [
            v
            for v in self.elements.values()
            if v.type == type
        ]

    def get_hierarchy(self, base):

        hier = []
        discovered = set([v.id for v in base])
        tier = 1

        while True:

            discovered_before = len(discovered)
            tier_discovery = set()

            for elt in self.elements.values():

                if elt.id in discovered: continue

                this_tier = False

                for edge in self.edges.values():
                    if edge.src == elt and edge.dest.id in discovered:
                        this_tier = True
                    elif edge.dest == elt and edge.src.id in discovered:
                        this_tier = True

                if this_tier:
                    tier_discovery.add(elt.id)

            tier += 1

            hier.append(
                [self.elements[v] for v in tier_discovery]
            )
            discovered = discovered.union(tier_discovery)

            if len(discovered) == discovered_before:
                break

        return hier

class Project:
    def __init__(self):
        pass

    @staticmethod
    def load(path):

        p = Project()
        p.project = json.load(open(path))
        return p

    def maps(self):
        return {
            map["_id"]: map["name"]
            for map in self.project["maps"]
        }

    def get(self, id):

        m = None
        for map in self.project["maps"]:            
            if map["_id"] == id:
                m = map

        if m == None: raise RuntimeError("No such map")

        all_elements = {
            v["_id"]: v
            for v in self.project["elements"]
        }

        all_edges = {
            v["_id"]: v
            for v in self.project["connections"]
        }

        elements = {}
        for element in m["elements"]:
            id = element["element"]
            elements[id] = Element(all_elements[id])

        edges = {}
        for edge in m["connections"]:
            id = edge["connection"]
            edges[id] = Edge(all_edges[id])
            edges[id].src = elements[all_edges[id]["from"]]
            edges[id].dest = elements[all_edges[id]["to"]]

        return Map(elements, edges)

p = Project.load("science-networks.json")

m = p.get("map-1vlBsQ28")

depts = m.get_type("Department")
hier = m.get_hierarchy(depts)

tier = {
    v: 0
    for v in depts
}

for i in range(0, len(hier)):
    for elt in hier[i]:
        tier[elt] = i + 1

g = Graph()

for elt in m.elements.values():
    g.add((
        URIRef("http://fixme.com/" + elt.id),
        URIRef("http://www.w3.org/1999/02/22-rdf-syntax-ns#type"),
        URIRef("http://fixme.com/t/thing")
    ))
    
    g.add((
        URIRef("http://fixme.com/" + elt.id),
        URIRef("http://www.w3.org/2000/01/rdf-schema#label"),
        Literal(elt.label),
    ))

    if elt.description:
        g.add((
            URIRef("http://fixme.com/" + elt.id),
            URIRef("http://www.w3.org/2000/01/rdf-schema#description"),
            Literal(elt.description)
        ))

for edge in m.edges.values():

    if tier[edge.src] > tier[edge.dest]:
        fwd = True
    elif tier[edge.dest] > tier[edge.src]:
        fwd = False
    elif edge.src.size > edge.dest.size:
        fwd = True
    elif edge.dest.size > edge.src.size:
        fwd = False
    elif edge.src.last > edge.dest.last:
        fwd = True
    elif edge.dest.last > edge.src.last:
        fwd = False
    else:

        # FIXME: Maybe use type to help hierarchy?
        fwd = True

    if fwd:
        g.add((
            URIRef("http://fixme.com/" + edge.src.id),
            URIRef("http://fixme.com/oversight"),
            URIRef("http://fixme.com/" + edge.dest.id),
        ))
    else:
        g.add((
            URIRef("http://fixme.com/" + edge.dest.id),
            URIRef("http://fixme.com/oversight"),
            URIRef("http://fixme.com/" + edge.src.id),
        ))



print(g.serialize(format="turtle"))

