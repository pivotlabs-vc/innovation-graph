#!/usr/bin/env python3

import json

try:

    dump = json.load(open("kumu-cybermaggedon-science-networks.json"))

    elts = {}
    edges = {}

    for i in dump["elements"]:

        id = i["_id"]

        elt = {
            "id": id
        }

        if "element type" in i["attributes"]:
            elt["type"] = i["attributes"]["element type"]

        if "label" in i["attributes"]:
            elt["label"] = i["attributes"]["label"]

        if "description" in i["attributes"]:
            elt["description"] = i["attributes"]["description"]

        if "tags" in i["attributes"]:
            elt["tags"] = i["attributes"]["tags"]
            
        elts[id] = elt

    for it in dump["connections"]:

        src = elts[it["from"]]
        dest = elts[it["to"]]

        edges[(src["id"], dest["id"])] = {
            "src": src,
            "dest": dest,
        }

except Exception as e:
    print(e)

def edge_name(e):

    n = e["label"]

    if "type" not in e:
        n += " [-]"
    else:
        n += " [" + e["type"] + "]"

    return n

def reln(src, dest):

    if "type" in src:
        stype = src["type"]
    else:
        stype = None

    if "type" in dest:
        dtype = dest["type"]
    else:
        dtype = None

    rels = {
        "Arm's Length Body": {
            "Arm's Length Body": "relates-to",
            "Department": "FIXME",
            "Network": "FIXME",
            "Science Advisory Committee": "FIXME",
            "Science Advisory Council": "FIXME",
            "Subcommittee": "FIXME",
            None: "FIXME",
        },
        "Department": {
            "Arm's Length Body": "FIXME",
            "Department": "FIXME",
            "Executive Agency": "FIXME",
            "External Experts": "FIXME",
            "Group of government experts": "FIXME",
            "Industrial Council": "FIXME",
            "Network": "FIXME",
            "Office": "FIXME",
            "Profession": "FIXME",
            "Research Centre": "FIXME",
            "Research Council": "FIXME",
            "Science Advisory Committee": "FIXME",
            "Science Advisory Council": "FIXME",
            "n/a": "FIXME",
            None: "FIXME",
        },
        "Devolved Administration": {
            "Arm's Length Body": "FIXME",
            "Executive Agency": "FIXME",
            "Research Centre": "FIXME",
            "Science Advisory Committee": "FIXME",
            "Science Advisory Council": "FIXME",
        },
        "Executive Agency": {
            "Arm's Length Body": "FIXME",
            "Science Advisory Committee": "FIXME",
        },
        "External Experts": {
            "Industrial Council": "FIXME",
            "National Academy": "FIXME",
            "Network": "FIXME",
            "Office": "FIXME",
            "Research Council": "FIXME",
            "Science Advisory Committee": "FIXME",
            None: "FIXME",
        },
        "Group of government experts": {
            None: "FIXME",
        },
        "Industrial Council": {
            "Science Advisory Committee": "FIXME",
        },
        "National Academy": {
            "National Academy": "FIXME",
        },
        "Network": {
            "Department": "FIXME",
            "Devolved Administration": "FIXME",
            "External Experts": "FIXME",
            "Network": "FIXME",
            "Subcommittee": "FIXME",
            "n/a": "FIXME",
            None: "FIXME",
        },
        "Office": {
            "Arm's Length Body": "FIXME",
            "Department": "FIXME",
            "External Experts": "FIXME",
            "Group of government experts": "FIXME",
            "Network": "FIXME",
            "Office": "FIXME",
            "Profession": "FIXME",
            "Science Advisory Committee": "FIXME",
            "Science Advisory Council": "FIXME",
        },
        "Research Centre": {
            "Arm's Length Body": "FIXME",
            "Research Centre": "FIXME",
            "Research Council": "FIXME",
        },
        "Research Council": {
            "Department": "FIXME",
            "Executive Agency": "FIXME",
            "External Experts": "FIXME",
            "Research Centre": "FIXME",
        },
        "Science Advisory Committee": {
            "Arm's Length Body": "FIXME",
            "Department": "FIXME",
            "Executive Agency": "FIXME",
            "Industrial Council": "FIXME",
            "Subcommittee": "FIXME",
            "n/a": "FIXME",
        },
        "Science Advisory Council": {
            "Department": "FIXME",
            "External Experts": "FIXME",
            "National Academy": "FIXME",
            "Science Advisory Council": "FIXME",
            None: "FIXME",
        },
        "Subcommittee": {
            "Department": "FIXME",
            "Devolved Administration": "FIXME",
        },
        "n/a": {
            "Department": "FIXME",
            "Science Advisory Committee": "FIXME",
        },
        None: {
            "Arm's Length Body": "FIXME",
            "Department": "FIXME",
            "External Experts": "FIXME",
            "n/a": "FIXME",
            None: "FIXME",
        },
    }

    return rels[stype][dtype]

for id in elts:

    elt = elts[id]

    print(id + ":")
    print("  label: " + elt["label"])

    if "type" not in elt:
        print("  type: " + "UNKNOWN")
    else:
        print("  type: " + elt["type"])
    print()

for id in edges:

    edge = edges[id]

    try:
        a = reln(edge["src"], edge["dest"])
    except Exception as e:
        print(e)

    print(
        edge_name(edge["src"]),
        " -> ",
        edge_name(edge["dest"]),
        " / ",
        reln(edge["src"], edge["dest"])
    )

depts = []

for id, elt in elts.items():

